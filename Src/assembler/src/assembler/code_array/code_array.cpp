#include <assert.h>
#include <stddef.h>
#include <stdlib.h>
#include "global/global_include.hpp"
#include "lib/lib.hpp"
#include "assembler/code_array/code_array.hpp"
#include "tokenizer/tokenizer.hpp"
#include "functions_for_files/files.hpp"



static size_t  CalcCodeSize(const TokensArray* tokens_array);
static CmdInfo GetCmdInfo  (const Token      * token       );



CodeArray CodeArrayCtor(const TokensArray* tokens_array)
{
    assert(tokens_array);

    const size_t code_size = CalcCodeSize(tokens_array);

    int* code_array = (int*) calloc(code_size, sizeof(*code_array));

    if (!code_array)
        EXIT(EXIT_FAILURE, "failed allocate memory for binary code array.");

    CodeArray final_code_array =
    {
        .array   = code_array,
        .size    = code_size ,
        .pointer = 0         ,
    };

    return final_code_array;
}



void CodeArrayDtor(CodeArray* code_array)
{
    assert(code_array);

    FREE(code_array->array);

    code_array->size    = 0;
    code_array->pointer = 0;

    return;
}



static size_t CalcCodeSize(const TokensArray* tokens_array)
{
    assert(tokens_array);

    const size_t tokens_array_size = tokens_array->size;
    const Token* tokens            = tokens_array->array;
    
    size_t code_array_size = 0;

    for (size_t cmd_pointer = 0; cmd_pointer < tokens_array_size; cmd_pointer++)
    {
        const Token token = tokens[cmd_pointer];

        const CmdInfo cmd_info = GetCmdInfo(&token);

        if (cmd_info.cmd != Cmd::undef_cmd)
        {
            cmd_pointer            += cmd_info.argQuant;
            code_array_size        += cmd_info.codeRecordSize;
        }
    }

    return code_array_size;
}




static CmdInfo GetCmdInfo(const Token* token)
{
    assert(token);

    if (token->type != TokenType::token_command)
        return {};

    Cmd token_cmd = token->value.command;

    for (size_t i = 0; i < CmdInfoArrSize; i++)
    {
        CmdInfo cmd = CmdInfoArr[i];
    
        if (token_cmd == cmd.cmd)
            return cmd;
    }

    __builtin_unreachable__();
    return {};
}


