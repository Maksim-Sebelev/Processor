#include <assert.h>




static AssemblerErr LabelsCtor(AsmData* AsmDataInfo)
{
    assert(AsmDataInfo);

    AssemblerErr err = {};

    static const size_t DefaultLabelsQuant = 10;

    AsmDataInfo->labels.labels = (Label*) calloc(DefaultLabelsQuant, sizeof(Label));

    if (!AsmDataInfo->labels.labels)
    {
        err.err = AssemblerErrorType::BAD_LABELS_CALLOC;
        return ASSEMBLER_VERIF(AsmDataInfo, err, {});
    }

    AsmDataInfo->labels.capacity = DefaultLabelsQuant;

    return ASSEMBLER_VERIF(AsmDataInfo, err, {});
}

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

static AssemblerErr LabelsDtor(AsmData* AsmDataInfo)
{
    assert(AsmDataInfo);

    AssemblerErr err = {};
    
    FREE(AsmDataInfo->labels.labels);
    AsmDataInfo->labels = {};

    return ASSEMBLER_VERIF(AsmDataInfo, err, {});
}



static Label LabelCtor(const TokenizerLabel* token_label, size_t pointer, bool alreadyDefined)
{
    assert(token_label);

    Label label = {};

    label.name          = token_label->name;
    label.code_place     = pointer;
    label.defined = alreadyDefined;

    return label;
}



static AssemblerErr PushLabel(AsmData* AsmDataInfo, const Label* label)
{
    assert(AsmDataInfo);
    assert(AsmDataInfo->labels.labels);
    assert(label);

    AssemblerErr err = {};

    LabelsArray* labels_array = &AsmDataInfo->labels;

    LabelsArray->size++;

    size_t size = LabelsArray->size;
    size_t capacity = LabelsArray->capacity;

    if (size <= capacity)
    {
        LabelsArray->labels[LabelsArray->size - 1] = *label;
        return ASSEMBLER_VERIF(AsmDataInfo, err, {});
    }

    size_t new_capacity = 2 * capacity;
    LabelsArray->labels = (Label*) realloc(LabelsArray->labels, new_capacity * sizeof(Label));

    if (!LabelsArray->labels)
    {
        err.err = AssemblerErrorType::BAD_LABELS_REALLOC;
        return ASSEMBLER_VERIF(AsmDataInfo, err, {});
    }

    LabelsArray->labels[LabelsArray->size - 1] = *label;

    return ASSEMBLER_VERIF(AsmDataInfo, err, {});
}



static bool IsLabelAlready(const AsmData* AsmDataInfo, const TokenizerLabel* label, size_t* labelPlace)
{
    assert(AsmDataInfo);
    assert(AsmDataInfo->labels.labels);
    
    LabelsArray labels = AsmDataInfo->labels;
    size_t size   = labels.size;

    for (size_t label_pointer = 0; label_pointer < size; label_pointer++)
    {
        Label label_i = labels.labels[label_pointer];
        

        if (strncmp(label->name, label_i.name, label->name_len) == 0)
        {
            *labelPlace = label_pointer;
            return true;
        }
    }

    return false;
}


