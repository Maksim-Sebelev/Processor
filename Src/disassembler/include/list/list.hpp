#ifndef LIST_HPP
#define LIST_HPP

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#include <stdio.h>
#include <stdlib.h>
#include "lib/lib.hpp"
#include "list/err_parse/err_parse.hpp"

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

using list_elem_t = int;

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ON_DEBUG(
struct WayToErr
{
    CodePlace now_place     ;
    WayToErr* previous_place; // nullptr  when it's place when error is made here or no error
};
)
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

enum class ListStatus
{
    OK,
    WARN,
    ERR,
};

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

enum class ListErrorType
{
    NO_ERR = 0,
    FAILED_ALLOCATE_MEMORY_IN_CTOR,
    TRY_TO_DTOR_NULLPTR_DATA,
};

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

enum class ListWarningType
{
    NO_WARN = 0,
    FAILED_REALLOCATE_DATA_AFTER_INSTERT,
    FAILED_REALLOCATE_DATA_AFTER_ERASE,
    ERASE_IN_EMPTY_LIST,
    TO_BIG_CAPACITY,
};

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

union ListStatusValue
{
    ListErrorType   err ;
    ListWarningType warn;
};

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

struct ListError_t
{
    ListStatus      status  ;
    ListStatusValue value   ;
    ON_DEBUG(
    WayToErr*       err_way ;
    )
};

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

struct ListElem
{
    list_elem_t value;
    size_t      next ;
    size_t      prev ;
};

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

struct List_t
{
    ListElem*  data;
    size_t     capacity;
    size_t     size;
    size_t     free;
};

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

ListError_t ListCtor         (List_t* List, size_t Capacity);
ListError_t ListDtor         (List_t* List);
ListError_t ListInsertAfter  (List_t* List, const size_t RefElem, const list_elem_t InsertElem, size_t* InsertPlace);
ListError_t ListInsertBefore (List_t* List, const size_t RefElem, const list_elem_t InsertElem, size_t* InsertPlace);
ListError_t ListPushBack     (List_t* List, const list_elem_t PushElem, size_t* PushPlace);
ListError_t ListPushFront    (List_t* List, const list_elem_t PushElem, size_t* PushPlace);
ListError_t ListErase        (List_t* List, const size_t EraseElemPlace, list_elem_t* EraseELem);
ListError_t ListPopBack      (List_t* List, list_elem_t* PopElem);
ListError_t ListPopFront     (List_t* List, list_elem_t* PopElem);


list_elem_t GetDataElemValue (const List_t* list, size_t Data_i);
size_t      GetTail          (const List_t* list);
size_t      GetNextIndex     (const List_t* list, size_t NowIndex);
size_t      GetPrevIndex     (const List_t* list, size_t NowIndex);
size_t      GetHead          (const List_t* list);
size_t      GetFree          (const List_t* list);
size_t      GetCapacity      (const List_t* list);
size_t      GetDataSize      (const List_t* list);

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#define LIST_CTOR(         list, capacity              ) LIST_ASSERT(list, ListCtor        (list, capacity    ))
#define LIST_DTOR(         list                        ) LIST_ASSERT(list, ListDtor        (list              ))
#define LIST_INSERT_AFTER( list, ref_elem, value, place) LIST_ASSERT(list, ListInsertAfter (list, ref_elem, value, place))
#define LIST_INSERT_BEFORE(list, ref_elem, value, place) LIST_ASSERT(list, ListInsertBefore(list, ref_elem, value, place))
#define LIST_ERASE(        list, place,    value       ) LIST_ASSERT(list, ListErase       (list, place, value))
#define LIST_PUSH_BACK(    list, value,    place       ) LIST_ASSERT(list, ListPushBack    (list, value, place))
#define LIST_PUSH_FRONT(   list, value,    place       ) LIST_ASSERT(list, ListPushFront   (list, value, place))
#define LIST_POP_BACK(     list, value                 ) LIST_ASSERT(list, ListPopBack     (list, value       ))
#define LIST_POP_FRONT(    list, value                 ) LIST_ASSERT(list, ListPopFront    (list, value       ))

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#endif // LIST_HPP
