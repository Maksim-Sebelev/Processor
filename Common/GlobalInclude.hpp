#ifndef GLOBAL_INCLUDE_H
#define GLOBAL_INCLUDE_H

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

enum Cmd
{
    hlt = 0,
    push,
    pop,
    add,
    sub,
    mul,
    dive,
    out,    // just out int
    outc,   // out char
    outr,   // out int and remove it
    outrc,  // out char and remove it
    jmp,
    ja,
    jae,
    jb,
    jbe,
    je,
    jne,
    CMD_QUANT // count
};

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

struct CmdInfo
{
    const Cmd    cmd;
    const size_t argQuant;
    const size_t codeRecordSize;
};

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

static const CmdInfo CmdInfoArr[] = 
{
    {Cmd::hlt,  0, 1},
    {Cmd::push, 1, 4},
    {Cmd::pop,  1, 4},
    {Cmd::add,  0, 1},
    {Cmd::sub,  0, 1},
    {Cmd::mul,  0, 1},
    {Cmd::dive, 0, 1},
    {Cmd::out,  0, 1},
    {Cmd::outc, 0, 1},
    {Cmd::outr, 0, 1},
    {Cmd::outrc,0, 1},
    {Cmd::jmp,  1, 2},
    {Cmd::ja,   1, 2},
    {Cmd::jae,  1, 2},
    {Cmd::jb,   1, 2},
    {Cmd::jbe,  1, 2},
    {Cmd::je,   1, 2},
    {Cmd::jne,  1, 2},
};

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

static const size_t CmdInfoArrSize = sizeof(CmdInfoArr) / sizeof(CmdInfoArr[0]);

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

static_assert((Cmd::CMD_QUANT == (int) CmdInfoArrSize), "You forgot about some Cmd in CmdInfoArr");

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

enum Registers
{
    ax = 0,
    bx,
    cx,
    dx,
    REGISTERS_QUANT, // Count
    REGISTERS_NAME_LEN = 2,
};

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

struct PushType
{
    unsigned int stk   : 1;
    unsigned int reg   : 1;
    unsigned int mem   : 1;
    unsigned int sum   : 1;
};


//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

struct PopType
{
    unsigned int reg   : 1;
    unsigned int mem   : 1;
    unsigned int sum   : 1;
};

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

enum ArithmeticOperator
{
    plus           = Cmd::add , 
    minus          = Cmd::sub ,
    multiplication = Cmd::mul ,
    division       = Cmd::dive,
};

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

enum ComparisonOperator
{
    above           = Cmd::ja ,
    above_or_equal  = Cmd::jae,
    bellow          = Cmd::jb ,
    bellow_or_equal = Cmd::jbe,
    equal           = Cmd::je ,
    not_equal       = Cmd::jne,
    always_true     = Cmd::jmp,
};

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

struct IOfile
{
    const char* ProgrammFile;
    const char* CodeFile;
};

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

struct CodePlace
{
    const char* file;
    int         line;
    const char* func;
};

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

void PrintPlace     (                  const char* const file, const int line, const char* const func);
void CodePlaceCtor  (CodePlace* place, const char* const file, const int line, const char* const func);

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#define PRINT_PLACE(color, file, line, func) printf(color); PrintPlace(file, line, func); printf(RESET)

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#define RETURN_IF_FALSE(flag, returnElem, ...) \
if (!(flag))                                    \
{                                                \
    __VA_ARGS__;                                  \
    return returnElem;                             \
}                                                   \

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#define RETURN_IF_TRUE(flag, returnElem, ...) \
if ((flag))                                    \
{                                               \
    __VA_ARGS__;                                 \
    return returnElem;                            \
}     

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#define FREE(Arr) free(Arr); Arr = NULL;

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#endif
