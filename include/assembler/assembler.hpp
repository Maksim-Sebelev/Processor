#ifndef ASSEMBLER_HPP
#define ASSEMBLER_HPP

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#include "common/globalInclude.hpp"
#include "lib/lib.hpp"

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

enum class AssemblerErrorType
{
    NO_ERR                       ,
    INVALID_INPUT_AFTER_PUSH     ,
    INVALID_INPUT_AFTER_POP      ,
    FAILED_OPEN_INPUT_STREAM     ,
    FAILED_OPEN_OUTPUT_STREAM    ,
    FWRITE_BAD_RETURN            ,
    UNDEFINED_COMMAND            ,
    BAD_CODE_ARR_REALLOC         ,
    LABEL_REDEFINE               ,
    BAD_LABELS_CALLOC            ,
    BAD_LABELS_REALLOC           ,
    INCORRECT_SUM_FIRST_OPERAND  ,
    INCORRECT_SUM_SECOND_OPERAND ,
    INCORRECT_PP_ARG             ,
    INCORRECT_MM_ARG             ,
};

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

struct AssemblerErr
{
    CodePlace          place;
    AssemblerErrorType err;
};

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

void RunAssembler         (const IOfile* file);
void AssemblerAssertPrint (AssemblerErr* err, const char* file, int line, const char* func);

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#define ASSEMBLER_ASSERT(Err) do                                 \
{                                                                 \
    AssemblerErr ErrCopy = Err;                                    \
    if (ErrCopy.err != AssemblerErrorType::NO_ERR)                  \
    {                                                                \
        AssemblerAssertPrint(&ErrCopy, __FILE__, __LINE__, __func__); \
        abort();                                                       \
    }                                                                   \
} while (0)                                                              \

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#endif
