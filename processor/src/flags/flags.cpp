#include <getopt.h>
#include <assert.h>
#include "global/global_include.hpp"
#include "flags/flags.hpp"
#include "lib/lib.hpp"

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

static void HandleExeFlag  (const char** file);
static void HandleUndefFlag(                 );

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

static struct option long_options[] =
{
    {"execute", required_argument, nullptr, 'e'},
    {nullptr, 0, nullptr, 0}
};

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

const char* CallFlags(int argc, char* argv[])
{
    assert(argv);

    if (argc <= 1)
        EXIT(EXIT_FAILURE, "asm:fatal err:empty input\n");

    const char* file = nullptr;
    int         opt  = 0;

    while ((opt = getopt_long(argc, argv, "e:", long_options, nullptr)) != -1)
    {
        switch (opt)
        {
            case 'e': HandleExeFlag  (&file); break;
            default : HandleUndefFlag(    ); break;
        }
    }

    return file;
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

static void HandleExeFlag(const char** file)
{
    assert(file);
    assert(optarg);

    *file = optarg;

    return;
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

__attribute__((__noreturn__)) static void HandleUndefFlag()
{
    if (optarg)
        EXIT(EXIT_FAILURE, "asm:fatal err:undef option - '%s'\n", optarg);

    exit(EXIT_FAILURE);
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
